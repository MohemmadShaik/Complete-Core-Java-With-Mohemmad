11. Function/Methods
========================

11.1 Introduction to functions :
================================
- A reusable block of code/statements which is written once and can be 
  called any no.of times as per the user need without re-writing the 
                      same logic of code again and again.

- Functions occupies memory in the form of call stack, where
  the call stack contains stack frames which is discussed
   in detail in 11.5 What happens in Memory?

syntax with no parameters
=========================
returnType name(){
    //body
    return statement;
}

Syntax with parameters
======================
returnType name(type param1, type param2){
    //body
    return statement;
}

NOTE : If we write any function within a class then those functions are called as methods in java.
KEY NOTE : Like other langauges (C, C++ , Python) we can write functions outside the class (which are Called as Standalone functions) 
           but Java programmming is designed in such a way that all functions should be written within the classes only.
           We can write any no.of functions within a single class.

//11.2 Program 1:

public class MyFunction {
    public static void printHelloWorld() {
        System.out.println("Hello World");
        System.out.println("Hello World");
        System.out.println("Hello World");
        return;
    }

    public static void main(String[] args) {

        printHelloWorld();//function call

    }

}

======================================================================

//11.3 Program 2: Addition of 2 numbers using function

Note : Here we will break this program into 3 parts 

Part 1 : Program to calculate Sum of 2 numbers (i.e without using function)
Part 2 : Program to calculate Sum of 2 numbers without using any return type and without passing any arguments.
Part 3 : Program to calculate Sum of 2 numbers with return type and passing the arguments.
 
 //PART 1 : Program to calculate Sum of 2 numbers (i.e without using function)
import java.util.Scanner;

public class MyFunction {
  
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter  a value : ");
        int a = sc.nextInt();
        System.out.print("Enter  b value : ");
        int b = sc.nextInt();
        int sum = a + b;
        System.out.println("Sum is : "+sum);

        sc.close();// close the scanner to avoid resource leaks
    }
 }

 //PART 2 : Program to calculate Sum of 2 numbers without using any return type and without passing any arguments.

 import java.util.Scanner;

public class MyFunction {

    public static void calculateSum() {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a value : ");
        int a = sc.nextInt();
        System.out.print("Enter b value : ");
        int b = sc.nextInt();
        int sum = a + b;
        System.out.println("Sum of " + a + " and " + b + " is : " + sum);
        sc.close();
    }

    public static void main(String[] args) {
        calculateSum();
    }
}

// Part 3 : Program to calculate Sum of 2 numbers by passing the arguments but with no return type


import java.util.Scanner;

public class MyFunction {
    // Passing the arguments with no return type
    public static void calculateSum(int num1, int num2){
        int sum = num1 + num2;
        System.out.println("Sum of " + num1 + " and " + num2 + " is : " + sum);
        
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a value : ");
        int a = sc.nextInt();
        System.out.print("Enter b value : ");
        int b = sc.nextInt();
        calculateSum(a,b); //Passing the arguments

        sc.close();
        
    }
}

// Part 4 : Program to calculate Sum of 2 numbers by passing the arguments with return type

import java.util.Scanner;

public class MyFunction {
     // Passing arguments with returntype
    public static int calculateSum(int num1, int num2){
        int sum = num1 + num2; 
        return sum;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a value : ");
        int a = sc.nextInt();
        System.out.print("Enter b value : ");
        int b = sc.nextInt();
        int sum = calculateSum(a,b); //Passing the arguments
        System.out.println("Sum of " + a + " and " + b + " is : " + sum);
        sc.close();
    }
}

/* Note : Scope of num1 and num2 arguments are limited so we can't access them in our main() 
          Here the int sum variable defined in user( ) and main( ) are completely different.  */

//11.4 : parameters VS Arguments

--> Parameters are defined in the method declaration.
    Parameters act as placeholders that define what type of data the method can accept.

--> Arguments are passed during the method call.
    Arguments are the actual data you provide to the method.

//11.5 : What happens in memory call stack

- Functions occupies memory in the form of stacks which we call as a Call Stack.

1. Managing Method Invocation:
=============================
 The call stack keeps track of all the methods that are called during the execution of a program. 
 When a method is called, a new stack frame (a block of memory) is created and pushed onto the stack,
 containing the method's parameters, local variables, and the address to return to once the method execution is complete.

2. Handling Method Returns:
==========================
 Once a method finishes execution, its stack frame is popped off the stack, and control is returned 
 to the calling method. 
 The call stack ensures that each method returns to the correct location in the program.

3. Maintaining Execution Order:
==============================
 The call stack operates in a Last In, First Out (LIFO) manner. 
 The last method called is the first one to finish execution and be removed from the stack.
 This ensures that methods are executed and returned in the correct order.

4. Supporting Recursive Methods:
===============================
 The call stack enables recursion by allowing multiple instances of the same method to be active at different points 
 in time. 
 Each recursive call creates a new stack frame, allowing the method to maintain its own state independently
 of other calls.

5. Storing Local Variables and Parameters:
=========================================
 Each stack frame stores the method's local variables and parameters. 
 These variables are only accessible within the context of the method
 and are discarded when the method completes.

 INSHORT :
 =========
 The call stack in Java is used to manage method execution order and 
 track local variables, ensuring that each method call is executed
 and returned correctly. 

 It's essential for handling recursion, method invocation, and 
 maintaining program flow, making it a key concept in understanding 
 how Java handles method calls internally.

Example :
========
                |                |
                |                |
                |________________|
                |                |
                |________________|
                |  sum()         |
                |     int type   |stack frame 
                |________________|
                | main()         |
                |    string type |stack frame
                |________________|
                   Call stack 


public class myAddfunc{
      public static int add(int a, int b){  // add( ) int type
         int add = a + b;
         return sum;
       }
   public static void main(String args[]){ // main( ) string type
         add(5,2);
      }
   }

Note : - As many no.of functions defined in the program that many no.of stack frames will be created in the call stack.
       - Once the return statement of the function gets executed then the memory occupied in the STACK FRAME gets cleared.
       - And similarly once the main( ) gets executed then the memory occupied in the STACK FRAME gets cleared from the CALL STACK.


//11.6 : Call by value in java

//11.6.1 PART 1 : Call by Value Using a method without a return type.
/* - Using primitive type (here int is a primitive data type) */
/* 
 public class CallByValueFunc3{
    public static void modifyPrimitiveType(int num){
        num = 30; // This change will not affect the original value
    }
    public static void main(String[] args) {
        int a = 10;
        modifyPrimitiveType(a); //Call by value
        System.out.println("After modifyPrimitiveType( ) : "+a); // output: 10
    }
}

*/

//11.6.1 PART 2 : Call by Value Using a method with a return type.
/* - Using primitive type (here int is a primitive data type) */
/* 
public class CallByValueFunc3{
    public static int modifyPrimitiveType(int num){
        num = 30; // This change will not affect the original value
        return num;
    }
    public static void main(String[] args) {
        int a = 10;
        a = modifyPrimitiveType(a); //Call by value
        System.out.println("After modifyPrimitiveType( ) : "+a); // output: 30
    }
}
*/

//11.6.2 PART 1 : Call by Value  Using a method without a return type.
/* - Using non-primitive type (here String is a non-primitive data type) */


/* public class CallByValueFunc3 {
         public static void modifyNonPrimitiveType(String str){
            str = "World"; //This change will not affect the original value because Scope of str is limited to this method only 
         }
    public static void main(String[] args) {
        String text = "Hello";
        modifyNonPrimitiveType(text);
        System.out.println("After modifyNonPrimitiveType( ) : "+text); // output : Hello
    }
}
*/


//11.6.2 PART 2 : Call by Value Using a method with return type.
/* - Using non-primitive type (here String is a non-primitive data type) */
/* 
public class CallByValueFunc3{
    public static String modifyNonPrimitiveType(String str){
        str = "World";
        return str;
    }
    public static void main(String[] args) {
        String text = "Hello";
        text = modifyNonPrimitiveType(text);
        System.out.println("After modifyNonPrimitiveType( ) : "+text); //World
    }
} 
    */

//11.6.3 Example with Non-Primitive Type and a method with no return type 

class Box {
    int value;
}

public class CallByValueFunc3 {
    public static void modifyObject(Box box) {
        box.value = 30; // This change will affect the original object
    }

    public static void main(String[] args) {
        Box b = new Box();
        b.value = 10;
        modifyObject(b); // Call by value (copy of reference)
        System.out.println("After modifyObject( ) : " + b.value); // output: 30
    }
}

/* 

Note 1 : 
======
11.6.1 PART1 ==> The scope of local variables (num in your example) is indeed limited to the method, 
                 so changes to primitives do not affect the original value.

11.6.3       ==> for non-primitive types, while the reference itself cannot be
                 changed (within the method's scope), the object's internal state
                 can be modified, affecting the original object outside the method.
Note 2 : 
======
Primitive Types (e.g., int): 
---------------------------
The copy of the value is passed, so changes to the local variable
in the method do not affect the original variable.

Non-Primitive Types (e.g., Box object):
--------------------------------------
The copy of the reference is passed, so changes to the object’s state
through the reference do affect the original object.

*/

//Q1 . Difference between "Call by Value" and "Call by Reference"?
  Sol : In Java, "call by value" means that a copy of the variable's value is passed to the method. 
        Java does not support "call by reference" for objects or primitives; 
        instead, it passes the reference to the object by value.

Program 1 :
========== 
         
          public class Example1 {
    public static void main(String[] args) {
        int number = 5;
        modifyPrimitive(number); // Call by value
        System.out.println("After modifyPrimitive: " + number); // Output: 5
        
        int[] numbers = {1, 2, 3};
        modifyArray(numbers); // Passes reference by value
        System.out.println("After modifyArray: " + numbers[0]); // Output: 10
    }
    
    static void modifyPrimitive(int n) {
        n = 10; // This change will not affect the original value
    }
    
    static void modifyArray(int[] arr) {
        arr[0] = 10; // This change will affect the original array
    }
}

Note: The number remains 5 after calling modifyPrimitive, demonstrating "call by value". 
       The numbers array is modified because the reference to the array is passed by value.

// Q2. Is Java "Call by Value" or "Call by Reference"?
 Sol: Java is strictly "call by value." 
      For primitive types, the actual value is passed, 
      and for objects, the reference (address) to the object is passed by value, 
      not the object itself (Explained in 11.6.3 example program)

Program 2:
=========

public class Example2 {
    public static void main(String[] args) {
        String text = "Hello";
        modifyString(text);
        System.out.println("After modifyString: " + text); // Output: Hello
    }

    static void modifyString(String str) {
        str = "World"; // This change does not affect the original string
    }
}

Note : Java passes the reference to the string by value. 
       Reassigning the string inside the method does not affect the original text.

//Q3. Can you Modify an Object Passed to a Method ? or 
      What happens if you modify an object passed to a method in Java?
Sol : If you modify an object inside a method, 
      the changes will be reflected outside the method 
      because the reference to the object is passed by value,
      not the object itself.

 Program 3 :
 ===========
public class Example3 {
    public static void main(String[] args) {
        Person person = new Person("John");
        modifyPerson(person);
        System.out.println("After modifyPerson: " + person.name); // Output: Mike
    }

    static void modifyPerson(Person p) {
        p.name = "Mike"; // This change affects the original object
    }
}

class Person {
    String name;

    Person(String name) {
        this.name = name;
    }
}

Note : The name of the Person object is changed inside the method, 
       and the change is reflected outside the method as well.

//Q4. Changing the Reference of a Variable Passed to a Method?
Sol : No, you cannot change the original reference outside the method.
      If you reassign the reference inside the method, 
      it will not affect the original reference outside the method.

Program 4:
=========
public class Example4 {
    public static void main(String[] args) {
        Person person = new Person("John");
        changeReference(person);
        System.out.println("After changeReference: " + person.name); // Output: John
    }

    static void changeReference(Person p) {
        p = new Person("Mike"); // This does not affect the original reference
    }
}

Note :  The person object’s reference is reassigned to a new Person object
        inside changeReference, but this change does not affect 
        the original person outside the method.

Q5. Given the following code, what will be the output?

Program 5 :
==========

public class Test {
    public static void main(String[] args) {
        int num = 10;
        modify(num);
        System.out.println(num); // What is the output? Answer : 10
    }

    static void modify(int x) {
        x = 20;
    }
}

Note : Output is 10, because Java passes the primitive by value.
       Here the method modify only changes the local copy of num,
       not the original variable.

//Q6. Understanding the Output of Call by Value with Primitives

Program 6 :
==========

public class Example5 {
    public static void main(String[] args) {
        int x = 9, y = 10;
        int a = 2, b = 4, c = 6;
      
        int prod = x * y; 
        int subt = b - a; 
        int add = a + b + c;
        
        System.out.println(add); // Output: 12
        System.out.println(subt); // Output: 2
        System.out.println(prod); // Output: 90
    }
}

// Q7 : How do we use "call by value with objects? give 3 examples?

Example 1 :
==========










