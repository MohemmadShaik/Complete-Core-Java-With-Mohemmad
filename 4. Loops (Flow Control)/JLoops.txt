9 Loops ( Flow Control )
*************************
9.1 Loops Basics
9.2 while Loop
9.3 Print numbers from 1 to 10
9.4 Print numbers from 1 to n
9.5 Sum of first N natural numbers
9.6 for Loop
9.7 Print Square pattern
9.8 Print reverse of a number
9.9 Reverse the given number
9.10 do while Loop
9.11 Break statement
9.12 Question - break keyword
9.13 Continue statement
9.14 Question - continue keyword
9.15 Check if a number is Prime or not
9.16 Loops Questions FAQ's
*====++=====++========++==========++======++======++======++====*

9.Loops (Flow Controls)
----------------------
- A loop in Java is a control structure that allows you to execute
  a block of code repeatedly based on a condition. 

- Loops are useful when you need to perform repetitive tasks,
  such as iterating through elements of an array, 
  performing calculations multiple times, or 
  processing user input until a certain condition is met.

Types of Loops in Java:
======================
while Loop
for Loop
do-while Loop
Enhanced for Loop (used with arrays or collections)

9.1. while Loop : when you do not know in advance how many times you 
     ==========   want to execute a statement or block of statements.
                  The loop continues as long as the condition is true.
   
   inshort : Best when the number of iterations is unknown but
   =======   the condition is known.
   
   syntax :
   ======

   while (condition) {
     
     // do something
   
    }

Program 1 : To print numbers from 1 to 5.
==========

public class Main {
    public static void main(String[] args) {
        int i = 1;
        while (i <= 5) {
            System.out.println("Iteration: " + i);
            i++;
        }
    }
}

output :
======

Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4
Iteration: 5

//9.2program 1 : To print Hello World 100 times

/* public class JLoops {
    public static void main(String[] args) {
        int counter = 0;
        while (counter<100) {
            System.out.println(counter+" : Hello World");
            counter++;
            
        }
        System.out.println("Hello World Printed 100 times completed.");
    }
} 
*/

//9.3Program 2 : To print numbers 1 to 10 using while loop

/* public class JLoops {

    public static void main(String[] args) {
        int count = 1;
        while(count <= 10){
            System.out.print(count+" ");
            count++;
        }
        System.out.println("\n Printed 1 to 10 numbers completed. ");
    }
} */

// 9.4 Program 3 : To print numbers 1 to n, where n is the number given by the user end.\

/*
import java.util.Scanner;
 public class JLoops{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int count= 1;
        System.out.print( " Enter n value : ");
        int n = sc.nextInt();

       while(count<=n){
        System.out.print(count+" ");
        count++;
       }
       System.out.println(" Numbers printed from 1 to n :"+n+" completed.");
       sc.close(); // close the scanner to avoid resource leaks
    }
}

*/

/* 
  //9.5 Program 4 : To print sum of first n natural numbers
  // Eg : let's say n = 5 then 1 + 2 + 3+ 4 + 5 = 15
 
 import java.util.Scanner;
 public class JLoops {
 
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter n value : ");
        int n = sc.nextInt();
        int i = 1;
        int sum = 0;
        
        while(i <= n){
             
             sum = sum + i;
             i++;   
        }
        System.out.println("Sum of first n :"+n+" Natural Numbers : "+sum);
        sc.close();// close the scanner to avoid resource leaks
    }
 }

 */

=====================>> While Loop END <<=====================

9.6 for Loop: when you know in advance how many times you want to
    ========  execute a statement or a block of statements.

   inshort : Best when the number of iterations is known.

syntax : 

   for (initialization; condition; update) {
    //do something
   }

//Program 1:  to print 10 times Hello World using for loop.

 public class JLoops{

    public static void main(String[] args) {
        for(int i=1; i<=10 ; i++){
            System.out.println(i+". Hello World");
        }
        System.out.println("Hello World Printed 10x");
    }
 }
*/


 //9.7 Print SQUARE Pattern
/* 
 public class JLoops{
    public static void main(String[] args) {
        for(int i = 1; i <= 4 ; i++){
            System.out.println("* * * *");
        }
    }
 }

 */

 // 9.8 Print Reverse of a number
  // $$NOTE1 : To get the last digit of any number use : num%10
  // $$NOTE2 : To remove the last digit of any number use : num/10
  /* $$NOTE3 : Formula to store the given number in reverse order is 
               REVERSE = ( REVERSE * 10) + LAST_DIGIT
                where LAST_DIGIT = number%10 
                and to update the number use number/10 */
       let n=240189
        reverse=0;
        last_digit = n%10;
        /* reverse = ( reverse * 10) + last_digit;
        reverse = (0 * 10) + 9     ==> 0 + 9 = 9
        reverse = (9 * 10) + 8     ==> 90 + 8 = 98
        reverse = (98 * 10) + 1    ==> 980 + 1 = 981
        reverse = (981 * 10) + 0   ==> 9810 + 0 = 9810
        reverse = (9810 * 10) + 4  ==> 98100 + 8 = 98104
        reverse = (98104 * 10) + 2 ==> 981040 + 2 = 981042 */
        n=n/10; (Updating the n value) 

//9.9 Program to print the reverse of a given number   
 import java.util.Scanner;;
  public class JLoops{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number a reverse : ");
        int num=sc.nextInt();
        int given_number = num;
        int reverse = 0;
        int last_digit = 0;
        while(num>0){
            last_digit = num%10;
            reverse = (reverse * 10) + last_digit;
            num = num/10;                                                                                                                                                                                                   
        }
        System.out.println("given Number : "+given_number+ "\n"+" Reverse Number : "+reverse);
       sc.close();//close the scanner to avoid resource leaks
    }
  }

//9.10
3. do-while Loop : It is similar to the while loop, but the condition
   ============    is checked after the loop's body is executed,
                   ensuring that the loop runs at least once.

  Inshort : Similar to while but ensures the loop executes
            at least once.
  
  syntax :
  =======
  do {
    // Code to be executed
 } while (condition);
                 
Program 1 :
===========

public class Main {
    public static void main(String[] args) {
        int i = 1;
        do {
            System.out.println("Iteration: " + i);
            i++;
        } while (i <= 5);
    }
}

output :
======
Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4
Iteration: 5

4. Enhanced for Loop (for-each loop):
   =================================
   The enhanced for loop is used to iterate through elements in an array or a collection.
   
   Inshort : Best for iterating over arrays or collections in a simplified manner.


   syntax:
   ======
   for (dataType item : array) {
    // Code to be executed
   }

   Program 1:
   =========
   public class Main {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        
        for (int num : numbers) {
            System.out.println("Number: " + num);
        }
    }
}

output :
======

Number: 1
Number: 2
Number: 3
Number: 4
Number: 5


//9.11 Break Statement : To exit from loop we use break statement

/* 
// Program 9.11.1 : If i value is 3 then exit from the loop 
public class JLoops{
    public static void main(String[] args) {
        for (int i = 1; i<=10 ; i++){
            if(i==3){
                break; // to exit from this entire for loop
            }
            System.out.println(i);
        }
        System.out.println("Am out of the loop when i value is 3 ");
    }
}

*/

//9.12 Question - break keyword
 // Program 9.12.1 : Keep entering numbers till user enters a multiple of 10

   /*  User entry         Print
         1                  1
         6                  6
         5                  5
         12                 12
         7                   7
         3                   3
         20                  Exit since 20 is multiple of 10 */

//LOGIC 1 :
/* 
import java.util.Scanner;
public class JLoops{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        do{
            
            System.out.print("Enter a number here : ");
            int n = sc.nextInt();
            if(n % 10 == 0){
                break;
            }
            System.out.println(n);
        }while(true);
    }
}
    */


/* 
//LOGIC 2 :
import java.util.Scanner;
 public class JLoops{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter any random number not multiply by 10 : ");
        int num = sc.nextInt();
        while(num>0){
            if(num%10==0){
                break;
            }
            System.out.println(num);
            // Ask for the next number
            System.out.print("Enter another number: ");
            num = sc.nextInt();
        }
        System.out.println("exit loop since "+num+" is multiply by 10.");
    }
 }

*/

// 9.13 Continue statement : to skip an iteration

/* Eg : Print 1 to 5 numbers where 3rd value should be skipped
    output :  1 2 4 5 */

// 9.13 Continue statement : to skip an iteration

// Program 9.13.1 : Print 1 to 5 numbers such that 3 value should be skippped

public class JLoops{
    public static void main(String[] args) {
        for(int i = 1; i<=5 ; i++){
            if(i==3){
                continue;
            }
            System.out.println(i);
        }
    }
}

//  9.14 Question - continue keyword

// Program 9.14 : Display all numbers entered by user except multiple of 10

// Note : Here the program is in infinite loop because 1. while loop  never get false and
                                                    // 2. we used continue statement 
                                                    // 3. To exit from infinite loop press  ctrl + c 
import java.util.Scanner;
public class JLoops {

     public static void main(String[] args) {
        Scanner sc =new Scanner(System.in);
        do{
            System.out.print("Enter a number : ");
            int num = sc.nextInt();
            if(num % 10 == 0){
                continue;
            }
            System.out.println(num);

        }while(true);

        //sc.close(); // to close the scanner to avoid resource leaks

     }
}





